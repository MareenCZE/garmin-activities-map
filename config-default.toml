# #####################################################################
# Use this config table to control which processors are used, i.e. which steps are executed.
# Typical use case is to use ON, ON, ON, ON, OFF which will do all the processing from downloading new activities from GarminConnect
# over generating the map to uploading the map to an FTP site.
[mode]
# Download activities from GarminConnect? Supported values: ON and OFF
downloader = "ON"
# Generate map from activities? Supported values: ON and OFF
map-creator = "ON"
# Minify generated map? Supported values: ON and OFF
minifier = "ON"
# Upload the map to an FTP site? Supported values: ON and OFF
uploader = "ON"
# Utility operations. To be used in exceptional cases when you do code changes or manual data changes. Supported values:
#  - REDOWNLOAD (for this mode activity_id needs to be specified below)
#  - REGENERATE_COORDINATES
#  - REGENERATE_CSV
#  - RESORT_CSV
#  - ENCRYPT_FTP_PASSWORD
#  - OFF
utility-mode = "OFF"
# ID of activity to re-download. Applies only when downloader_mode==REDOWNLOAD
activity-id = ""

# #####################################################################
# Copy the FTP section to config-local.toml and populate it with values if you want to upload the result to an FTP site.
[ftp]
# FTP hostname - leave empty if you do not want to use FTP
host = ""
# FTP username
user = ""
# FTP password. It needs to be encrypted - see encrypt method in ftpuploader.py
pass = ""
# FTP directory path on the server
remote-path = ""
# Name of the file on the FTP server which the generated map will be saved to
remote-filename = "index.html"

# #####################################################################
[map-tiles]
# Opening center point of the map. Default is set to Prague. Put your override into config-local.toml
center-point=[50.0755, 14.4378]
# If you want to use map tiles from Mapy.cz, put your personal API key as an override in config-local.toml.
# See https://developer.mapy.cz/en/rest-api-mapy-cz/api-key/
mapy-cz-api-key = ""
# Here you can customize which tiles are available on the map. You can switch between the listed ones when viewing the page.
# You can use whatever tiles are supported by Folium - see examples on https://xyzservices.readthedocs.io/en/stable/gallery.html.
# You may need to find the proper value to use for the tiles parameter. Name is your custom name to show in the map control.
tiles = [
    { tiles='OpenStreetMap', name="OSM" },
    { tiles='cartodbdark_matter', name="Dark" },
    { tiles='cartodbpositron', name="Light" },
    { tiles='mapy.cz', name="Mapy.cz" }
]

# #####################################################################
[activities]
# Highlight activities on mouse hover. Makes output larger (7.8 MB instead of 6.3 MB after minification).
enable-activity-highlighting = true
# This defines categories of activities. Each activity needs to belong to a category.
# If no match for activity type_key is found, it is put into the first 'default' category.
# You can see type_key value of an activity in its json.
# You may need to add a new category or add a type_key to an existing category to suit your needs.
mapping = [
    { name = "Other", color = "grey", type_keys = [] },
    { name = "Running", color = "magenta", type_keys = ["running", "track_running", "trail_running"] },
    { name = "Inline", color = "blueviolet", type_keys = ["inline_skating"] },
    { name = "Skiing", color = "red", type_keys = ["resort_skiing", "resort_snowboarding", "resort_skiing_snowboarding_ws"] },
    { name = "Crosscountry", color = "dodgerblue", type_keys = ["skate_skiing_ws", "cross_country_skiing_ws", "backcountry_skiing"] },
    { name = "Hiking", color = "brown", type_keys = ["hiking", "walking"] },
    { name = "Cycling", color = "deeppink", type_keys = ["cycling", "mountain_biking", "gravel_cycling"] }
]
# It is not necessary to use all the full GPS coordinates. They are large and the level of detail is not needed for purposes of the map.
# Therefore, using simplification utility to minimize size of the coordinates collection while still keeping almost the same shape of the
# route. Size of the coordinates directly affects size of the resulting html file.
# The simplification algorithm requires an epsilon parameter. See what impact it had on a sample of my data (Ëœ2000 activities):
# 0.001    ..   1.8 MB (very noticeable loss of precision)
# 0.0005   ..   3.8 MB (noticeable loss of precision)
# 0.0001   ..  11.6 MB (reasonably good)
# 0.00001  ..  41.8 MB
# original .. 132.5 MB (coordinates without simplification)
# GPX files..   1.2 GB (all the GPX data, including heartrate etc.)
coords-simplification-factor = 0.0001
# Round coordinates to a certain number of decimal places. Higher number means higher precision. Lower number means smaller size of
# the resulting page. Five decimal places should give around 1m precision and reduces size by 1/3.
coords-decimal-places = 5
# Max number of activities to process in one go. This is to avoid spamming Garmin Connect interface with too many requests. Too many
# automated requests may get noticed by Garmin. They may then want to block your access or the API for everyone.
max-number-of-activities = 500
# URL used in pop-up for a direct link to the activity in Garmin Connect
garmin-connect-activity-url = "https://connect.garmin.com/modern/activity/"

# #####################################################################
[storage]
# Local storage of activities. This is the golden source of activities used for generating the map.
# Make sure you know what you are doing before touching the CSV.
activities-database = 'data/activities_list.csv'
# Directory containing local copy of activities in JSON format. They are not needed for the map. You can keep them locally as a backup or
# for future if you want to e.g. include other fields on the map.
directory-json = 'data/json'
# Directory containing local copy of original GPX coordinates of activities. These original ones are no longer needed once they are
# processed. You can keep them locally as a backup or if you want to regenerate in the future e.g. with a different precision.
directory-gpx = 'data/gpx'
# Directory containing processed GPX coordinates of activities. These are used for the map as they are significantly smaller than
# the original ones.
directory-coordinates = 'data/coordinates'
# OAuth token for Garmin Connect gets stored here. That way you do not need to re-enter your credentials on each use.
directory-token-store = '.auth/'

# #####################################################################
[output]
# Where to store the result
map-filename = 'data/activities_map.html'
# Where to store the result after Javascript minification
map-minified-filename = 'data/activities_map.min.html'